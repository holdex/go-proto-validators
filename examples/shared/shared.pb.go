// Code generated by protoc-gen-go. DO NOT EDIT.
// source: examples/shared/shared.proto

package example_shared

import (
	_ "bitbucket.org/holdex/go-proto-validators"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type InType int32

const (
	InType_ANY  InType = 0
	InType_Test InType = 1
)

var InType_name = map[int32]string{
	0: "ANY",
	1: "Test",
}

var InType_value = map[string]int32{
	"ANY":  0,
	"Test": 1,
}

func (x InType) String() string {
	return proto.EnumName(InType_name, int32(x))
}

func (InType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_b92bebc36c753dad, []int{0}
}

type InnerInnerMessage struct {
	// some_integer can only be in range (1, 100).
	Test                 InType   `protobuf:"varint,1,opt,name=test,proto3,enum=example_shared.InType" json:"test,omitempty"`
	TestArray            []InType `protobuf:"varint,2,rep,packed,name=test_array,json=testArray,proto3,enum=example_shared.InType" json:"test_array,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *InnerInnerMessage) Reset()         { *m = InnerInnerMessage{} }
func (m *InnerInnerMessage) String() string { return proto.CompactTextString(m) }
func (*InnerInnerMessage) ProtoMessage()    {}
func (*InnerInnerMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_b92bebc36c753dad, []int{0}
}

func (m *InnerInnerMessage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_InnerInnerMessage.Unmarshal(m, b)
}
func (m *InnerInnerMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_InnerInnerMessage.Marshal(b, m, deterministic)
}
func (m *InnerInnerMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InnerInnerMessage.Merge(m, src)
}
func (m *InnerInnerMessage) XXX_Size() int {
	return xxx_messageInfo_InnerInnerMessage.Size(m)
}
func (m *InnerInnerMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_InnerInnerMessage.DiscardUnknown(m)
}

var xxx_messageInfo_InnerInnerMessage proto.InternalMessageInfo

func (m *InnerInnerMessage) GetTest() InType {
	if m != nil {
		return m.Test
	}
	return InType_ANY
}

func (m *InnerInnerMessage) GetTestArray() []InType {
	if m != nil {
		return m.TestArray
	}
	return nil
}

func init() {
	proto.RegisterEnum("example_shared.InType", InType_name, InType_value)
	proto.RegisterType((*InnerInnerMessage)(nil), "example_shared.InnerInnerMessage")
}

func init() { proto.RegisterFile("examples/shared/shared.proto", fileDescriptor_b92bebc36c753dad) }

var fileDescriptor_b92bebc36c753dad = []byte{
	// 200 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x92, 0x49, 0xad, 0x48, 0xcc,
	0x2d, 0xc8, 0x49, 0x2d, 0xd6, 0x2f, 0xce, 0x48, 0x2c, 0x4a, 0x4d, 0x81, 0x52, 0x7a, 0x05, 0x45,
	0xf9, 0x25, 0xf9, 0x42, 0x7c, 0x50, 0xd9, 0x78, 0x88, 0xa8, 0x94, 0x45, 0x52, 0x66, 0x49, 0x52,
	0x69, 0x72, 0x76, 0x6a, 0x89, 0x5e, 0x7e, 0x51, 0xba, 0x7e, 0x46, 0x7e, 0x4e, 0x4a, 0x6a, 0x85,
	0x7e, 0x7a, 0xbe, 0x2e, 0x58, 0xb9, 0x6e, 0x59, 0x62, 0x4e, 0x66, 0x4a, 0x62, 0x49, 0x7e, 0x51,
	0xb1, 0x3e, 0x9c, 0x09, 0x31, 0x49, 0xa9, 0x8c, 0x4b, 0xd0, 0x33, 0x2f, 0x2f, 0xb5, 0x08, 0x4c,
	0xf8, 0xa6, 0x16, 0x17, 0x27, 0xa6, 0xa7, 0x0a, 0x69, 0x71, 0xb1, 0x94, 0xa4, 0x16, 0x97, 0x48,
	0x30, 0x2a, 0x30, 0x6a, 0xf0, 0x19, 0x89, 0xe9, 0xa1, 0xda, 0xa6, 0xe7, 0x99, 0x17, 0x52, 0x59,
	0x90, 0x1a, 0x04, 0x56, 0x23, 0x64, 0xca, 0xc5, 0x05, 0xa2, 0xe3, 0x13, 0x8b, 0x8a, 0x12, 0x2b,
	0x25, 0x98, 0x14, 0x98, 0xf1, 0xe8, 0xe0, 0x04, 0xa9, 0x74, 0x04, 0x29, 0xd4, 0x92, 0xe6, 0x62,
	0x83, 0x08, 0x0a, 0xb1, 0x73, 0x31, 0x3b, 0xfa, 0x45, 0x0a, 0x30, 0x08, 0x71, 0x70, 0xb1, 0x84,
	0xa4, 0x16, 0x97, 0x08, 0x30, 0x26, 0xb1, 0x81, 0xdd, 0x66, 0x0c, 0x08, 0x00, 0x00, 0xff, 0xff,
	0x77, 0x63, 0x97, 0x5b, 0x05, 0x01, 0x00, 0x00,
}
