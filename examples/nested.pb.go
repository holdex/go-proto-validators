// Code generated by protoc-gen-go. DO NOT EDIT.
// source: examples/nested.proto

package validator_examples

import (
	fmt "fmt"
	_ "github.com/georgeciubotaru/go-proto-validators"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type InType int32

const (
	InType_ANY  InType = 0
	InType_Test InType = 1
)

var InType_name = map[int32]string{
	0: "ANY",
	1: "Test",
}

var InType_value = map[string]int32{
	"ANY":  0,
	"Test": 1,
}

func (x InType) String() string {
	return proto.EnumName(InType_name, int32(x))
}

func (InType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_48ff2d59662eadb1, []int{0}
}

type InnerMessage struct {
	// some_integer can only be in range (1, 100).
	Test                 InType   `protobuf:"varint,1,opt,name=test,proto3,enum=validator.examples.InType" json:"test,omitempty"`
	TestArray            []InType `protobuf:"varint,2,rep,packed,name=test_array,json=testArray,proto3,enum=validator.examples.InType" json:"test_array,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *InnerMessage) Reset()         { *m = InnerMessage{} }
func (m *InnerMessage) String() string { return proto.CompactTextString(m) }
func (*InnerMessage) ProtoMessage()    {}
func (*InnerMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_48ff2d59662eadb1, []int{0}
}

func (m *InnerMessage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_InnerMessage.Unmarshal(m, b)
}
func (m *InnerMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_InnerMessage.Marshal(b, m, deterministic)
}
func (m *InnerMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InnerMessage.Merge(m, src)
}
func (m *InnerMessage) XXX_Size() int {
	return xxx_messageInfo_InnerMessage.Size(m)
}
func (m *InnerMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_InnerMessage.DiscardUnknown(m)
}

var xxx_messageInfo_InnerMessage proto.InternalMessageInfo

func (m *InnerMessage) GetTest() InType {
	if m != nil {
		return m.Test
	}
	return InType_ANY
}

func (m *InnerMessage) GetTestArray() []InType {
	if m != nil {
		return m.TestArray
	}
	return nil
}

func init() {
	proto.RegisterEnum("validator.examples.InType", InType_name, InType_value)
	proto.RegisterType((*InnerMessage)(nil), "validator.examples.InnerMessage")
}

func init() { proto.RegisterFile("examples/nested.proto", fileDescriptor_48ff2d59662eadb1) }

var fileDescriptor_48ff2d59662eadb1 = []byte{
	// 223 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x4d, 0xad, 0x48, 0xcc,
	0x2d, 0xc8, 0x49, 0x2d, 0xd6, 0xcf, 0x4b, 0x2d, 0x2e, 0x49, 0x4d, 0xd1, 0x2b, 0x28, 0xca, 0x2f,
	0xc9, 0x17, 0x12, 0x2a, 0x4b, 0xcc, 0xc9, 0x4c, 0x49, 0x2c, 0xc9, 0x2f, 0xd2, 0x83, 0x29, 0x90,
	0xb2, 0x4b, 0xcf, 0x2c, 0xc9, 0x28, 0x4d, 0xd2, 0x4b, 0xce, 0xcf, 0xd5, 0x4f, 0x4f, 0xcd, 0x2f,
	0x4a, 0x4f, 0x4d, 0xce, 0x2c, 0x4d, 0xca, 0x2f, 0x49, 0x2c, 0x2a, 0xd5, 0x4f, 0xcf, 0xd7, 0x05,
	0x6b, 0xd4, 0x85, 0xeb, 0x2b, 0xd6, 0x47, 0x18, 0x01, 0x96, 0x52, 0xea, 0x65, 0xe4, 0xe2, 0xf1,
	0xcc, 0xcb, 0x4b, 0x2d, 0xf2, 0x4d, 0x2d, 0x2e, 0x4e, 0x4c, 0x4f, 0x15, 0xb2, 0xe4, 0x62, 0x29,
	0x49, 0x2d, 0x2e, 0x91, 0x60, 0x54, 0x60, 0xd4, 0xe0, 0x33, 0x92, 0xd2, 0xc3, 0xb4, 0x53, 0xcf,
	0x33, 0x2f, 0xa4, 0xb2, 0x20, 0xd5, 0x89, 0xf3, 0xd1, 0x7d, 0x79, 0x56, 0x01, 0xc6, 0x09, 0x8c,
	0x8c, 0x41, 0x60, 0x2d, 0x42, 0x4e, 0x5c, 0x5c, 0x20, 0x3a, 0x3e, 0xb1, 0xa8, 0x28, 0xb1, 0x52,
	0x82, 0x49, 0x81, 0x99, 0x80, 0x01, 0xec, 0x8f, 0xee, 0xcb, 0x33, 0x83, 0xb4, 0x73, 0x82, 0xb4,
	0x39, 0x82, 0x74, 0x69, 0x49, 0x73, 0xb1, 0x41, 0x64, 0x85, 0xd8, 0xb9, 0x98, 0x1d, 0xfd, 0x22,
	0x05, 0x18, 0x84, 0x38, 0xb8, 0x58, 0x42, 0x52, 0x8b, 0x4b, 0x04, 0x18, 0x93, 0xd8, 0xc0, 0x6e,
	0x36, 0x06, 0x04, 0x00, 0x00, 0xff, 0xff, 0x0e, 0x3d, 0x1b, 0xac, 0x20, 0x01, 0x00, 0x00,
}
